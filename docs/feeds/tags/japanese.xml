<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>.dot life</title><id>https://p-snow.org/feeds/tags/japanese.xml</id><subtitle>Tag: japanese</subtitle><updated>2024-06-28T19:38:57Z</updated><link href="https://p-snow.org/feeds/tags/japanese.xml" rel="self" /><link href="https://p-snow.org" /><entry><title>新たなスペルチェッカー Jinx</title><id>https://p-snow.org/新たなスペルチェッカー-jinx.html</id><author><name>p-snow</name></author><updated>2023-12-12T18:50:00Z</updated><link href="https://p-snow.org/新たなスペルチェッカー-jinx.html" rel="alternate" /><content type="html">&lt;p&gt;
この記事は &lt;a href=&quot;https://qiita.com/advent-calendar/2023/emacs&quot;&gt;Emacs Advent Calendar 2023&lt;/a&gt; の13日目の記事です。
&lt;/p&gt;&lt;p&gt;
みなさんEmacsで英文、書いてますか？
&lt;/p&gt;&lt;p&gt;
最近、個人的に英語での情報発信欲が高まっていて、このサイトでもいくつか英文記事を書きました。海外からいろいろレスポンスをもらえるのは楽しいです。
英文執筆ではChatGPTの存在が頼もしく、私の稚拙な英語表現もおおむね正しく直してくれるので、間違いを恐れずガンガン書き進めていけるのがよいです。
ChatGPT利用には主に &lt;a href=&quot;https://github.com/xenodium/chatgpt-shell&quot;&gt;chatgpt-shell&lt;/a&gt; パッケージを使っています。M-x chatgpt-shell-proofread-region すれば校閲結果を返してくれます。
&lt;/p&gt;&lt;p&gt;
今日は私の英文執筆時のもうひとつのミカタ、英単語スペルチェッカー Jinx を紹介してみたいとおもいます。
&lt;/p&gt;&lt;p&gt;
Emacs でスペルチェッカーと言うとビルトインの ispell/flyspell がありますが、個人的にはうまく使えずにいました。M-$ (ispell-word) を押しても自分が使っている completion framework (vertico) が使えなかったり、などなど。
Jinxは動作が機敏で単語修正候補に好みの補完フレームワークが使えるので個人的に満足しています。
&lt;/p&gt;&lt;p&gt;
Jinxはバックエンドとして&lt;a href=&quot;https://abiword.github.io/enchant/&quot;&gt;Enchant&lt;/a&gt;を使います。Enchantは統一的なスペルチェック用APIを提供するライブラリです。その裏ではHunspellやAspellなどのスペルチェックプログラムをユーザが指定する順序で呼び出しています。
なのでJinxを動作させるには、Jinx自身をインストール・設定することに加えて、Enchantとスペルチェッカーもインストールする必要があります。
&lt;/p&gt;&lt;p&gt;
以下、関連パッケージのインストール例
&lt;/p&gt;&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Jinxインストール時にlibenchantを使ってモジュールをコンパイルするのでpkgconf/pkg-configが必要&lt;/li&gt;
&lt;li&gt;スペルチェッカーはEnchantでデフォルトチェッカーになっている Hunspell だけあれば事足りる印象&lt;/li&gt;
&lt;li&gt;macOSでは&lt;a href=&quot;https://github.com/minad/jinx/issues/48&quot;&gt;フリーズするケースがある&lt;/a&gt;そうなのでご注意を&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
Ubuntu/Debian
&lt;/p&gt;&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;apt install libenchant-2-dev pkgconf enchant-2 hunspell hunspell-en-us
&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;
Guix
&lt;/p&gt;&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;guix install emacs-jinx enchant hunspell hunspell-dict-en hunspell-dict-en-us
&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;
Enchantは、ユーザコンフィグディレクトリ(~/.config/enchant など)にユーザ辞書(en_US.dic)などを置いて checker agnostic に設定することができます。
&lt;/p&gt;&lt;p&gt;
Jinxは GNU ELPA/melpa にあるので問題なくインストールできます。M-$ を ispell-word に代わって jinx-correct に割り当てています。
&lt;/p&gt;&lt;p&gt;
&lt;details&gt;&lt;summary&gt;Elisp Code&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(use-package jinx
  :ensure t
  :bind ((&amp;quot;M-$&amp;quot; . jinx-correct)
         (&amp;quot;C-M-$&amp;quot; . jinx-languages))
  :hook ((prog-mode conf-mode) . jinx-mode)
  :config
  (bind-keys :map jinx-mode-map
             (&amp;quot;M-n&amp;quot; . jinx-next)
             (&amp;quot;M-p&amp;quot; . jinx-previous)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;/p&gt;&lt;/details&gt;
&lt;/p&gt;&lt;p&gt;
これで M-$ を押せばJinxがスペルミスした単語を見つけだし修正候補を提示してくれます。スペルミスした単語にポイントを置き M-n/M-p で次/前の候補に移動してどんどん修正できます。超快適！
&lt;/p&gt;</content></entry><entry><title>Org内でタスク名のヒストリを残す</title><id>https://p-snow.org/org内でタスク名のヒストリを残す.html</id><author><name>p-snow</name></author><updated>2023-11-21T18:58:00Z</updated><link href="https://p-snow.org/org内でタスク名のヒストリを残す.html" rel="alternate" /><content type="html">&lt;p&gt;
タスクとは、生まれて実施されて終えられて捨てられる。そんな存在。たとえ賞味の実施期間は短くとも、タスクのライフサイクル全体を見れば、管理する当人も驚くくらいに長くなっていたなんてことはザラにあるのではないでしょうか。長い時間というものはいろいろなものを変え得る可能性を秘めています。ビジネスの風向きが変わることもあれば、生活環境が変わることもあるでしょう。そんな変化を経てもタスクだけは絶対に不変であるなんてことはもちろんありません。もしかしたらタスクの中身、つまりやることは不変だったとしても、タスク管理者のタスクに対するまなざしが変わっていたなんてこともあるでしょう。そんなときにおもうのです。「このタスク名、何か変じゃね」と。
&lt;/p&gt;&lt;p&gt;
タスク名を変える。行為としてはこんな簡単なことはありません。でも私はこれが苦手でした。なぜでしょうか。ひとつには、改名するにあたり経年したタスクと真剣に向き合い直す必要があり、メンタル負荷的にこれを避けたいという心理がはたらいていたのかもしれません。もう一つは、改名することで前のタスク名が完全に消されてしまい、タスクの時間的な変遷が隠れてしまうことを惜しんでいたフシがあるような気がします。タスクを作成した当初はこういう意図や動機があってこう名付けたが、事情や事態が変わってああいうタスク名になった、というような情報は個人的には軽視できないメタ情報だとおもいます。タスク内にメモすればいいわけですが、改名のワークフローとフォーマットは統一されていた方が自分好みなので下のようなコードを書きました。新しいタスク名を入力するとタスクが改名されると同時に一つ前のタスク名は日付情報とともにヒストリとして保存されます。
&lt;/p&gt;&lt;p&gt;
&lt;details&gt;&lt;summary&gt;Elisp Code&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-log-into-drawer t)

(defun my/org-change-heading ()
  &amp;quot;CHange the heading of the entry at `point'.

The previous name will be stored along with the execution date.&amp;quot;
  (interactive)
  (let* ((old-heading (org-get-heading t t t t))
         (new-heading (read-string &amp;quot;Heading: &amp;quot; old-heading)))
    (save-excursion
      (org-back-to-heading t)
      (replace-string old-heading new-heading nil
                      (line-beginning-position) (line-end-position))
      (org-align-tags))
    (org-add-log-setup 'state new-heading old-heading 'state)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;/p&gt;&lt;/details&gt;
&lt;/p&gt;&lt;p&gt;
この機能を使うようになってからタスクの作成と改名が軽快におこなえるようになった気がします。「会議で提案されたアレをやっておく」のようなタスクが作成できるようになって、後で修正すせばいいからとタスク作成の心理的な負荷が軽減される一方で、修正後に残されたヒストリを見て「発生時にはアレと呼ばなければならないくらい、このタスクはあの時点では自分にとって新規性の高いものだったんだな」などと振り返ることができるのです。
&lt;/p&gt;</content></entry><entry><title>Org-modeは九龍城砦</title><id>https://p-snow.org/org-modeは九龍城砦.html</id><author><name>p-snow</name></author><updated>2023-07-13T17:03:00Z</updated><link href="https://p-snow.org/org-modeは九龍城砦.html" rel="alternate" /><content type="html">&lt;p&gt;
以下の記事を興味深く読みました。
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;https://rashita.net/blog/?org-mode%E3%81%A8%E3%81%84%E3%81%86%E4%BC%9D%E7%B5%B1&quot;&gt;https://rashita.net/blog/?org-mode%E3%81%A8%E3%81%84%E3%81%86%E4%BC%9D%E7%B5%B1&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Logseq や Obsidian に org-mode が提供する機能(のいくつか)が取り入れられて、多くのユーザに支持されているようで、個人的には喜ばしいことだなと思っています。(すいません、どちらも使ったことはありません。)この現象をみていると私は、org-modeで提供されているある機能と、それを参考にして実装された他アプリの機能は同じなのか、ということをよく考えます。いや、機能としては確かにほぼ同等だろうとは思います。もちろん優劣の話でもありません。以下に展開してみましょう。
&lt;/p&gt;&lt;p&gt;
org-modeは、確かに出来ることを列挙していくと「重厚な思想に基づいてつくられた巨大なシステム」のように見えますが、その実体は細かいピースの集合体です。そのピースとは何か。それは、ユーザが自由に弄ることのできる設定項目と、設定を反映しながら少し気の利いたことをしてくれるコマンドもしくは関数です。
&lt;/p&gt;&lt;p&gt;
これらのピースは、長い年月をかけてユーザの「こういうのあったらいいよね」を具現化して積み上げられてきました。自由闊達に。昔、誰かがブログでorg-modeを評して、「欲しい機能を好き勝手に入れ込んで積み上げられた九龍城砦のような違法建築」と言っていて、言い得て妙だなと思いました。この表現が適切かは分かりませんが、一定程度は的を射ているとおもいます。
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=No_vQ8FiQiw&quot;&gt;Kowloon walled city 九龍城砦 - YouTube&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
一方でorg-mode全体として整合性をとる必要はもちろんあるので、現メンテナのBastien Guerryの苦労は推して知るべし、かなと思っています。結果としてorg-modeは、細かいところまで設定できる柔軟性をもつ反面、ユーザに一定以上のリテラシを要求するものに仕上がったのだとおもいます。さらに言えば、この複雑な仕様ゆえにMarkdownのように標準化が進まず、結果として他のプラットフォームへの進出が芳しくない状態になっているのではないかと推察します。
&lt;/p&gt;&lt;p&gt;
つまり私がおもうのは、org-modeは、Big Pictureから精緻にデザインされたのではなく、ユーザのニーズに応え続けた「結果」であるということです。我々がorg-modeに抱く「思想」や「システム性」は後付けでしかないのではないか、と。(もちろんEmacsから受け継ぐ、特にテキスト編集における、ある種の「思想」はあります)
&lt;/p&gt;&lt;p&gt;
さて、最初の話に戻りましょう。org-modeの機能の一部を他のアプリが実装することだけを考えれば、それはそれほどむずかしいことではないかもしれません。しかし、org-modeにおける機能と機能の複雑な連携を考慮に入れようとすると、とたんに難易度が爆上がりする気がします。
&lt;/p&gt;&lt;p&gt;
加えて、機能と(キーボードメインの)ユーザ操作が独特のつながりをもつEmacsというプラットフォーム上での「体験」という点を考えれば、やはり両者はベツモノと考えた方がいいのではないか。現時点での私は、今のノートアプリ界隈の流れを見てそんなことを考えています。
&lt;/p&gt;</content></entry></feed>